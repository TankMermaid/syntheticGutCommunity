cogcat=c()
ko=c()
change=c()
a=1
for(gene in rownames(resfilt)){
cog[a]=paste(na.omit(blautia_annot[blautia_annot$Source=="COG_number" & blautia_annot$New_locus_tag==gene,3]), collapse=" - ")
cogcat[a]=paste(na.omit(blautia_annot[blautia_annot$Source=="COG_category" & blautia_annot$New_locus_tag==gene,3]), collapse=" - ")
ko[a]=paste(na.omit(blautia_annot[blautia_annot$Source=="KO_number" & blautia_annot$New_locus_tag==gene,3]), collapse=" - ")
if(gene %in% genesDW){
change[a]="DW"
}else{
change[a]="UP"
}
a=a+1
}
aa=bind(rownames(resfilt), change, cogcat, cog, ko)
aa=cbind(rownames(resfilt), change, cogcat, cog, ko)
head(aa)
aa
aa[order(aa$cog),]
aa[order(aa[,4]),]
statsData
### LRT, TAKING TIME INTERACTION INTO ACCOUNT ###
counts_genome=countMatrix[rint,as.character(coldataRI$expNames)]
rownames(coldataRI)=coldataRI$expNames
dds=DESeqDataSetFromMatrix(countData = counts_genome,
colData = coldataRI,
design = ~ type + time + time:type)
keep <- rowSums(counts(dds)) > 10
dds=dds[keep,]
ddseq = DESeq(dds, test = "LRT", reduced = ~ type + time)
restime = results(ddseq) ## this is for results of different patterns in time for mono vs triculture
res=results(ddseq, name="type_tri_vs_single", test="Wald")
## from the standard analysis, extract genes up- vs down- regulated
resfilt=res[!is.na(res$padj) & res$padj<0.05,]
rownames(resfilt)
aa=rownames(resfilt)
### LRT, TAKING TIME INTERACTION INTO ACCOUNT ###
counts_genome=countMatrix[bhyd,as.character(coldataBH$expNames)]
rownames(coldataBH)=coldataBH$expNames
dds=DESeqDataSetFromMatrix(countData = counts_genome,
colData = coldataBH,
design = ~ type + time)
keep <- rowSums(counts(dds)) > 10
dds=dds[keep,]
ddseq = DESeq(dds)
res = results(ddseq, contrast=c("type", "tri", "single")) ## this is for results mono vs triculture, up/down regulated, w/o considering time
plotMA(res)
## from the standard analysis, extract genes up- vs down- regulated
resfilt=res[!is.na(res$padj) & res$padj<0.05,]
aa=c(aa,rownames(resfilt))
### LRT, TAKING TIME INTERACTION INTO ACCOUNT ###
counts_genome=countMatrix[fpra,as.character(coldataFP$expNames)]
rownames(coldataFP)=coldataFP$expNames
dds=DESeqDataSetFromMatrix(countData = counts_genome,
colData = coldataFP,
design = ~ type + time)
keep <- rowSums(counts(dds)) > 10
dds=dds[keep,]
ddseq = DESeq(dds)
res = results(ddseq, contrast=c("type", "tri", "single")) ## this is for results mono vs triculture, up/down regulated, w/o considering time
plotMA(res)
## from the standard analysis, extract genes up- vs down- regulated
resfilt=res[!is.na(res$padj) & res$padj<0.05,]
aa=c(aa,rownames(resfilt))
aa
aa=c(aa,rownames(resfilt))
aa
### LRT, TAKING TIME INTERACTION INTO ACCOUNT ###
counts_genome=countMatrix[fpra,as.character(coldataFP$expNames)]
rownames(coldataFP)=coldataFP$expNames
dds=DESeqDataSetFromMatrix(countData = counts_genome,
colData = coldataFP,
design = ~ type + time)
keep <- rowSums(counts(dds)) > 10
dds=dds[keep,]
ddseq = DESeq(dds)
res = results(ddseq, contrast=c("type", "tri", "single")) ## this is for results mono vs triculture, up/down regulated, w/o considering time
plotMA(res)
## from the standard analysis, extract genes up- vs down- regulated
resfilt=res[!is.na(res$padj) & res$padj<0.05,]
aa=rownames(resfilt)
bb=resfilt[,1]
head(bb)
head(resfilt)
bb=resfilt[,2]
### LRT, TAKING TIME INTERACTION INTO ACCOUNT ###
counts_genome=countMatrix[rint,as.character(coldataRI$expNames)]
rownames(coldataRI)=coldataRI$expNames
dds=DESeqDataSetFromMatrix(countData = counts_genome,
colData = coldataRI,
design = ~ type + time)
keep <- rowSums(counts(dds)) > 10
dds=dds[keep,]
ddseq = DESeq(dds)
res = results(ddseq, contrast=c("type", "tri", "single")) ## this is for results mono vs triculture, up/down regulated, w/o considering time
plotMA(res)
## from the standard analysis, extract genes up- vs down- regulated
resfilt=res[!is.na(res$padj) & res$padj<0.05 & res$baseMean>10,]
aa=c(aa,rownames(resfilt))
bb=c(bb, resfilt[,2])
counts_genome=countMatrix[bhyd,as.character(coldataBH$expNames)]
rownames(coldataBH)=coldataBH$expNames
dds=DESeqDataSetFromMatrix(countData = counts_genome,
colData = coldataBH,
design = ~ type + time)
keep <- rowSums(counts(dds)) > 10
dds=dds[keep,]
ddseq = DESeq(dds)
res = results(ddseq, contrast=c("type", "tri", "single")) ## this is for results mono vs triculture, up/down regulated, w/o considering time
plotMA(res)
## from the standard analysis, extract genes up- vs down- regulated
resfilt=res[!is.na(res$padj) & res$padj<0.05,]
aa=c(aa,rownames(resfilt))
bb=c(bb, resfilt[,2])
write.table(cbind(aa,bb), "~/Documents/kevinRNAseq/allchanginggenes.txt", col.names=F, row.names=F, quote=F, sep="\t")
write.table(cbind(aa,round(bb,4)), "~/Documents/kevinRNAseq/allchanginggenes.txt", col.names=F, row.names=F, quote=F, sep="\t")
head(cbind(aa,round(bb,4)))
res
#generate the data
n=10000
set.seed(3345)
a=rnorm(n); b=rnorm(n)
x = .4*a + .4*b*b + rnorm(n)
y = .5*x + .3*a + .3*b*b + rnorm(n)
## LINEAR MODEL ####
#a model with controls gets the right coefficient
summary(lm(y ~ x + a + I(b^2)))
residmod=lm(x ~ a + I(b^2))
x.resid=resid(residmod)
#using a residualized variable gets the same coefficient
summary(lm(y ~ x.resid))
##load required packages and functions
require(ggpubr)
require(DESeq2)
require(clusterProfiler)
require(vegan)
require(tidyverse)
source("~/Documents/CRC/Rscripts/helperFunctions.R")
##define bacterial (and phage) indices in the count Matrix
fpra=5:2829
phiX=2840:2841
rint=2893:6727
bhyd=6735:10049
ychI=c(1:4,2830:2837,2852:2892,6728:6734,10050:16416)
## calculate basic statistics on the data (% of reads per species)
directory="~/Documents/kevinRNAseq/counts/"
files=list.files(directory)
species=c(rep("bhyd", times=5), rep("fpra", times=6), rep("rint", times=6), rep("all", times=6))
time=sapply(files, FUN=function(X){strsplit(X, split="[[:punct:]]")[[1]][2]})
coldata=cbind(species, time)
expNames=sapply(files, FUN=function(X){strsplit(X, split="_")[[1]][1]})
setwd(directory)
countMatrix=data.frame(row.names=read.table(files[1], header=F, stringsAsFactors=F, sep="\t")[1:16416,1])
for(exp in files){
tmp=read.table(exp, header=F, stringsAsFactors=F, sep="\t")[1:16416,]
countMatrix=cbind(countMatrix,tmp[,2])
}
colnames(countMatrix)=expNames
### PLOT TRANSCRIPT ABUNDANCE FOR EACH SPECIES, CALCULATING FPKM FOR EACH GENOME TO NORMALIZE BY TRANSCRIPTOME SIZE
statsData=as.data.frame(coldata, stringsAsFactors=F)
statsData$experiment=expNames
statsData$BH=apply(countMatrix[bhyd,], MARGIN=2, FUN=sum, na.rm=T)
statsData$RI=apply(countMatrix[rint,], MARGIN=2, FUN=sum, na.rm=T)
statsData$FP=apply(countMatrix[fpra,], MARGIN=2, FUN=sum, na.rm=T)
statsData$phiX=apply(countMatrix[phiX,], MARGIN=2, FUN=sum, na.rm=T)
statsData$yeast=apply(countMatrix[ychI,], MARGIN=2, FUN=sum, na.rm=T)
countsPerExp=apply(statsData[,4:8], 1, sum)
statsData$BH=statsData$BH*1e9/(countsPerExp*3018073) #length of the transcriptome
statsData$RI=statsData$RI*1e9/(countsPerExp*3543428) #length of the transcriptome
statsData$FP=statsData$FP*1e9/(countsPerExp*2540563) #length of the transcriptome
statsData$phiX=statsData$phiX*1e9/(countsPerExp*2*5386) #length of the transcriptome
statsData$yeast=statsData$yeast*1e9/(countsPerExp*9008924) #length of the transcriptome
percentageSums=apply(statsData[,4:8], MARGIN=1, FUN=sum)
statsData[,4:8]=statsData[,4:8]*100/percentageSums
## reshape data before plotting w/ ggbarplot
test1=statsData[,c(1:4)]
test1$sp="BH"
test2=statsData[,c(1:3,5)]
test2$sp="RI"
test3=statsData[,c(1:3,6)]
test3$sp="FP"
test4=statsData[,c(1:3,7)]
test4$sp="phiX"
test5=statsData[,c(1:3,8)]
test5$sp="Yeast"
colnames(test1)[4]="readCounts"
colnames(test2)[4]="readCounts"
colnames(test3)[4]="readCounts"
colnames(test4)[4]="readCounts"
colnames(test5)[4]="readCounts"
statsData=rbind(test1,test2,test3,test4,test5)
#reorder factors and change species names for visualization
statsData$time=factor(statsData$time, levels = c("3h", "9h", "15h"))
statsData$replicate=sapply(statsData$experiment, FUN=function(X){gsub(strsplit(X, split="-")[[1]][1], pattern="[[:alpha:]]", replacement="")})
statsData$replicate[statsData$replicate==14]=1
statsData$replicate[statsData$replicate==15]=2
statsData$replicate[statsData$replicate==16]=1
statsData$species[statsData$species=="bhyd"]="B. hydrogenotrophica"
statsData$species[statsData$species=="rint"]="R. intestinalis"
statsData$species[statsData$species=="fpra"]="F. prausnitzii"
statsData$species[statsData$species=="all"]="All"
statsData$sp[statsData$sp=="phiX"]="phiX174"
statsData$sp=factor(statsData$sp, levels=c("BH", "FP", "RI", "Yeast", "phiX174"))
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette="npg", legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
##load required packages and functions
require(ggpubr)
require(DESeq2)
require(clusterProfiler)
require(vegan)
require(tidyverse)
source("~/Documents/CRC/Rscripts/helperFunctions.R")
##define bacterial (and phage) indices in the count Matrix
fpra=5:2829
phiX=2840:2841
rint=2893:6727
bhyd=6735:10049
ychI=c(1:4,2830:2837,2852:2892,6728:6734,10050:16416)
## calculate basic statistics on the data (% of reads per species)
directory="~/Documents/kevinRNAseq/counts/"
files=list.files(directory)
species=c(rep("bhyd", times=5), rep("fpra", times=6), rep("rint", times=6), rep("all", times=6))
time=sapply(files, FUN=function(X){strsplit(X, split="[[:punct:]]")[[1]][2]})
coldata=cbind(species, time)
expNames=sapply(files, FUN=function(X){strsplit(X, split="_")[[1]][1]})
setwd(directory)
countMatrix=data.frame(row.names=read.table(files[1], header=F, stringsAsFactors=F, sep="\t")[1:16416,1])
for(exp in files){
tmp=read.table(exp, header=F, stringsAsFactors=F, sep="\t")[1:16416,]
countMatrix=cbind(countMatrix,tmp[,2])
}
colnames(countMatrix)=expNames
statsData=as.data.frame(coldata, stringsAsFactors=F)
statsData$experiment=expNames
statsData$BH=apply(countMatrix[bhyd,], MARGIN=2, FUN=sum, na.rm=T)
statsData$RI=apply(countMatrix[rint,], MARGIN=2, FUN=sum, na.rm=T)
statsData$FP=apply(countMatrix[fpra,], MARGIN=2, FUN=sum, na.rm=T)
statsData$phiX=apply(countMatrix[phiX,], MARGIN=2, FUN=sum, na.rm=T)
statsData$yeast=apply(countMatrix[ychI,], MARGIN=2, FUN=sum, na.rm=T)
percentageSums=apply(statsData[,4:8], MARGIN=1, FUN=sum)
statsData[,4:8]=statsData[,4:8]*100/percentageSums
test1=statsData[,c(1:4)]
test1$sp="BH"
test2=statsData[,c(1:3,5)]
test2$sp="RI"
test3=statsData[,c(1:3,6)]
test3$sp="FP"
test4=statsData[,c(1:3,7)]
test4$sp="phiX"
test5=statsData[,c(1:3,8)]
test5$sp="Yeast"
colnames(test1)[4]="readCounts"
colnames(test2)[4]="readCounts"
colnames(test3)[4]="readCounts"
colnames(test4)[4]="readCounts"
colnames(test5)[4]="readCounts"
statsData=rbind(test1,test2,test3,test4,test5)
statsData$time=factor(statsData$time, levels = c("3h", "9h", "15h"))
statsData$replicate=sapply(statsData$experiment, FUN=function(X){gsub(strsplit(X, split="-")[[1]][1], pattern="[[:alpha:]]", replacement="")})
statsData$replicate[statsData$replicate==14]=1
statsData$replicate[statsData$replicate==15]=2
statsData$replicate[statsData$replicate==16]=1
statsData$species[statsData$species=="bhyd"]="B. hydrogenotrophica"
statsData$species[statsData$species=="rint"]="R. intestinalis"
statsData$species[statsData$species=="fpra"]="F. prausnitzii"
statsData$species[statsData$species=="all"]="All"
statsData$sp[statsData$sp=="phiX"]="phiX174"
statsData$sp=factor(statsData$sp, levels=c("BH", "FP", "RI", "Yeast", "phiX174"))
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette="npg", legend="right", legend.title="Species", ylab = "Read counts (%)")+theme_light()
##load required packages and functions
require(ggpubr)
require(DESeq2)
require(clusterProfiler)
require(vegan)
require(tidyverse)
source("~/Documents/CRC/Rscripts/helperFunctions.R")
##define bacterial (and phage) indices in the count Matrix
fpra=5:2829
phiX=2840:2841
rint=2893:6727
bhyd=6735:10049
ychI=c(1:4,2830:2837,2852:2892,6728:6734,10050:16416)
## calculate basic statistics on the data (% of reads per species)
directory="~/Documents/kevinRNAseq/counts/"
files=list.files(directory)
species=c(rep("bhyd", times=5), rep("fpra", times=6), rep("rint", times=6), rep("all", times=6))
time=sapply(files, FUN=function(X){strsplit(X, split="[[:punct:]]")[[1]][2]})
coldata=cbind(species, time)
expNames=sapply(files, FUN=function(X){strsplit(X, split="_")[[1]][1]})
setwd(directory)
countMatrix=data.frame(row.names=read.table(files[1], header=F, stringsAsFactors=F, sep="\t")[1:16416,1])
for(exp in files){
tmp=read.table(exp, header=F, stringsAsFactors=F, sep="\t")[1:16416,]
countMatrix=cbind(countMatrix,tmp[,2])
}
colnames(countMatrix)=expNames
### PLOT TRANSCRIPT ABUNDANCE FOR EACH SPECIES, CALCULATING FPKM FOR EACH GENOME TO NORMALIZE BY TRANSCRIPTOME SIZE
statsData=as.data.frame(coldata, stringsAsFactors=F)
statsData$experiment=expNames
statsData$BH=apply(countMatrix[bhyd,], MARGIN=2, FUN=sum, na.rm=T)
statsData$RI=apply(countMatrix[rint,], MARGIN=2, FUN=sum, na.rm=T)
statsData$FP=apply(countMatrix[fpra,], MARGIN=2, FUN=sum, na.rm=T)
statsData$phiX=apply(countMatrix[phiX,], MARGIN=2, FUN=sum, na.rm=T)
statsData$yeast=apply(countMatrix[ychI,], MARGIN=2, FUN=sum, na.rm=T)
countsPerExp=apply(statsData[,4:8], 1, sum)
statsData$BH=statsData$BH*1e9/(countsPerExp*3018073) #length of the transcriptome
statsData$RI=statsData$RI*1e9/(countsPerExp*3543428) #length of the transcriptome
statsData$FP=statsData$FP*1e9/(countsPerExp*2540563) #length of the transcriptome
statsData$phiX=statsData$phiX*1e9/(countsPerExp*2*5386) #length of the transcriptome
statsData$yeast=statsData$yeast*1e9/(countsPerExp*9008924) #length of the transcriptome
percentageSums=apply(statsData[,4:8], MARGIN=1, FUN=sum)
statsData[,4:8]=statsData[,4:8]*100/percentageSums
## reshape data before plotting w/ ggbarplot
test1=statsData[,c(1:4)]
test1$sp="BH"
test2=statsData[,c(1:3,5)]
test2$sp="RI"
test3=statsData[,c(1:3,6)]
test3$sp="FP"
test4=statsData[,c(1:3,7)]
test4$sp="phiX"
test5=statsData[,c(1:3,8)]
test5$sp="Yeast"
colnames(test1)[4]="readCounts"
colnames(test2)[4]="readCounts"
colnames(test3)[4]="readCounts"
colnames(test4)[4]="readCounts"
colnames(test5)[4]="readCounts"
statsData=rbind(test1,test2,test3,test4,test5)
#reorder factors and change species names for visualization
statsData$time=factor(statsData$time, levels = c("3h", "9h", "15h"))
statsData$replicate=sapply(statsData$experiment, FUN=function(X){gsub(strsplit(X, split="-")[[1]][1], pattern="[[:alpha:]]", replacement="")})
statsData$replicate[statsData$replicate==14]=1
statsData$replicate[statsData$replicate==15]=2
statsData$replicate[statsData$replicate==16]=1
statsData$species[statsData$species=="bhyd"]="B. hydrogenotrophica"
statsData$species[statsData$species=="rint"]="R. intestinalis"
statsData$species[statsData$species=="fpra"]="F. prausnitzii"
statsData$species[statsData$species=="all"]="All"
statsData$sp[statsData$sp=="phiX"]="phiX174"
statsData$sp=factor(statsData$sp, levels=c("BH", "FP", "RI", "Yeast", "phiX174"))
statsData
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c("dgreen","blue", "red", rgb(238,135,108),rgb(64,173,203)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c("dgreen","blue", "red", rgb(238,135,108,1),rgb(64,173,203,1)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
?rgb
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c("dgreen","blue", "red", rgb(238,135,108,1,max = 255),rgb(64,173,203,1,max = 255)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c("darkgreen","blue", "red", rgb(238,135,108,1,max = 255),rgb(64,173,203,1,max = 255)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c("dgreen","blue", "red", "#E69F00", "#56B4E9"), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c("darkgreen","blue", "red", "#E69F00", "#56B4E9"), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
rgb(0, 0:12, 0, max = 255)
rgb(14, 238, 100, max = 255)
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c(rgb(14, 112, 3, max = 255),rgb(4, 0, 255, max = 255), rgb(251, 0, 6, max = 255), "#E69F00", "#56B4E9"), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c(rgb(14, 112, 3, max = 255),rgb(4, 0, 255, max = 255), rgb(251, 0, 6, max = 255), rgb(251, 90, 69, max = 255), rgb(25, 197, 198, max = 255)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c(rgb(14, 112, 3, max = 255),rgb(4, 0, 255, max = 255), rgb(251, 0, 6, max = 255), rgb(254, 181, 30, max = 255), rgb(25, 197, 198, max = 255)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
### kevin RNA-seq basic statistics of the mapped reads and differential expression analysis ###
##load required packages and functions
require(ggpubr)
require(DESeq2)
require(clusterProfiler)
require(vegan)
require(tidyverse)
##define bacterial (and phage) indices in the count Matrix
fpra=5:2829
phiX=2840:2841
rint=2893:6727
bhyd=6735:10049
ychI=c(1:4,2830:2837,2852:2892,6728:6734,10050:16416)
## calculate basic statistics on the data (% of reads per species)
directory="~/Documents/kevinRNAseq/counts/"
files=list.files(directory)
species=c(rep("bhyd", times=5), rep("fpra", times=6), rep("rint", times=6), rep("all", times=6))
time=sapply(files, FUN=function(X){strsplit(X, split="[[:punct:]]")[[1]][2]})
coldata=cbind(species, time)
expNames=sapply(files, FUN=function(X){strsplit(X, split="_")[[1]][1]})
setwd(directory)
countMatrix=data.frame(row.names=read.table(files[1], header=F, stringsAsFactors=F, sep="\t")[1:16416,1])
for(exp in files){
tmp=read.table(exp, header=F, stringsAsFactors=F, sep="\t")[1:16416,]
countMatrix=cbind(countMatrix,tmp[,2])
}
colnames(countMatrix)=expNames
### PLOT TRANSCRIPT ABUNDANCE FOR EACH SPECIES, CALCULATING FPKM FOR EACH GENOME TO NORMALIZE BY TRANSCRIPTOME SIZE
statsData=as.data.frame(coldata, stringsAsFactors=F)
statsData$experiment=expNames
statsData$BH=apply(countMatrix[bhyd,], MARGIN=2, FUN=sum, na.rm=T)
statsData$RI=apply(countMatrix[rint,], MARGIN=2, FUN=sum, na.rm=T)
statsData$FP=apply(countMatrix[fpra,], MARGIN=2, FUN=sum, na.rm=T)
statsData$phiX=apply(countMatrix[phiX,], MARGIN=2, FUN=sum, na.rm=T)
statsData$yeast=apply(countMatrix[ychI,], MARGIN=2, FUN=sum, na.rm=T)
countsPerExp=apply(statsData[,4:8], 1, sum)
statsData$BH=statsData$BH*1e9/(countsPerExp*3018073) #length of the transcriptome
statsData$RI=statsData$RI*1e9/(countsPerExp*3543428) #length of the transcriptome
statsData$FP=statsData$FP*1e9/(countsPerExp*2540563) #length of the transcriptome
statsData$phiX=statsData$phiX*1e9/(countsPerExp*2*5386) #length of the transcriptome
statsData$yeast=statsData$yeast*1e9/(countsPerExp*9008924) #length of the transcriptome
percentageSums=apply(statsData[,4:8], MARGIN=1, FUN=sum)
statsData[,4:8]=statsData[,4:8]*100/percentageSums
## reshape data before plotting w/ ggbarplot
test1=statsData[,c(1:4)]
test1$sp="BH"
test2=statsData[,c(1:3,5)]
test2$sp="RI"
test3=statsData[,c(1:3,6)]
test3$sp="FP"
test4=statsData[,c(1:3,7)]
test4$sp="phiX"
test5=statsData[,c(1:3,8)]
test5$sp="Yeast"
colnames(test1)[4]="readCounts"
colnames(test2)[4]="readCounts"
colnames(test3)[4]="readCounts"
colnames(test4)[4]="readCounts"
colnames(test5)[4]="readCounts"
statsData=rbind(test1,test2,test3,test4,test5)
#reorder factors and change species names for visualization
statsData$time=factor(statsData$time, levels = c("3h", "9h", "15h"))
statsData$replicate=sapply(statsData$experiment, FUN=function(X){gsub(strsplit(X, split="-")[[1]][1], pattern="[[:alpha:]]", replacement="")})
statsData$replicate[statsData$replicate==14]=1
statsData$replicate[statsData$replicate==15]=2
statsData$replicate[statsData$replicate==16]=1
statsData$species[statsData$species=="bhyd"]="B. hydrogenotrophica"
statsData$species[statsData$species=="rint"]="R. intestinalis"
statsData$species[statsData$species=="fpra"]="F. prausnitzii"
statsData$species[statsData$species=="all"]="All"
statsData$sp[statsData$sp=="phiX"]="phiX174"
statsData$sp=factor(statsData$sp, levels=c("BH", "FP", "RI", "Yeast", "phiX174"))
#plot
pdf("~/Documents/kevinRNAseq/mapping_counts_withphiX174_yeast_normalized.pdf", width=9, height=5)
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c(rgb(14, 112, 3, max = 255),rgb(4, 0, 255, max = 255), rgb(251, 0, 6, max = 255), rgb(254, 181, 30, max = 255), rgb(25, 197, 198, max = 255)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
dev.off()
statsData$sp[statsData$sp=="Yeast"]="S. cerevisiae S288c"
statsData$sp=factor(statsData$sp, levels=c("BH", "FP", "RI", "S. cerevisiae S288c", "PhiX174"))
#plot
pdf("~/Documents/kevinRNAseq/mapping_counts_withphiX174_yeast_normalized.pdf", width=9, height=5)
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c(rgb(14, 112, 3, max = 255),rgb(4, 0, 255, max = 255), rgb(251, 0, 6, max = 255), rgb(254, 181, 30, max = 255), rgb(25, 197, 198, max = 255)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
dev.off()
##load required packages and functions
require(ggpubr)
require(DESeq2)
require(clusterProfiler)
require(vegan)
require(tidyverse)
##define bacterial (and phage) indices in the count Matrix
fpra=5:2829
phiX=2840:2841
rint=2893:6727
bhyd=6735:10049
ychI=c(1:4,2830:2837,2852:2892,6728:6734,10050:16416)
## calculate basic statistics on the data (% of reads per species)
directory="~/Documents/kevinRNAseq/counts/"
files=list.files(directory)
species=c(rep("bhyd", times=5), rep("fpra", times=6), rep("rint", times=6), rep("all", times=6))
time=sapply(files, FUN=function(X){strsplit(X, split="[[:punct:]]")[[1]][2]})
coldata=cbind(species, time)
expNames=sapply(files, FUN=function(X){strsplit(X, split="_")[[1]][1]})
setwd(directory)
countMatrix=data.frame(row.names=read.table(files[1], header=F, stringsAsFactors=F, sep="\t")[1:16416,1])
for(exp in files){
tmp=read.table(exp, header=F, stringsAsFactors=F, sep="\t")[1:16416,]
countMatrix=cbind(countMatrix,tmp[,2])
}
colnames(countMatrix)=expNames
### PLOT TRANSCRIPT ABUNDANCE FOR EACH SPECIES, CALCULATING FPKM FOR EACH GENOME TO NORMALIZE BY TRANSCRIPTOME SIZE
statsData=as.data.frame(coldata, stringsAsFactors=F)
statsData$experiment=expNames
statsData$BH=apply(countMatrix[bhyd,], MARGIN=2, FUN=sum, na.rm=T)
statsData$RI=apply(countMatrix[rint,], MARGIN=2, FUN=sum, na.rm=T)
statsData$FP=apply(countMatrix[fpra,], MARGIN=2, FUN=sum, na.rm=T)
statsData$phiX=apply(countMatrix[phiX,], MARGIN=2, FUN=sum, na.rm=T)
statsData$yeast=apply(countMatrix[ychI,], MARGIN=2, FUN=sum, na.rm=T)
countsPerExp=apply(statsData[,4:8], 1, sum)
statsData$BH=statsData$BH*1e9/(countsPerExp*3018073) #length of the transcriptome
statsData$RI=statsData$RI*1e9/(countsPerExp*3543428) #length of the transcriptome
statsData$FP=statsData$FP*1e9/(countsPerExp*2540563) #length of the transcriptome
statsData$phiX=statsData$phiX*1e9/(countsPerExp*2*5386) #length of the transcriptome
statsData$yeast=statsData$yeast*1e9/(countsPerExp*9008924) #length of the transcriptome
percentageSums=apply(statsData[,4:8], MARGIN=1, FUN=sum)
statsData[,4:8]=statsData[,4:8]*100/percentageSums
## reshape data before plotting w/ ggbarplot
test1=statsData[,c(1:4)]
test1$sp="BH"
test2=statsData[,c(1:3,5)]
test2$sp="RI"
test3=statsData[,c(1:3,6)]
test3$sp="FP"
test4=statsData[,c(1:3,7)]
test4$sp="phiX"
test5=statsData[,c(1:3,8)]
test5$sp="Yeast"
colnames(test1)[4]="readCounts"
colnames(test2)[4]="readCounts"
colnames(test3)[4]="readCounts"
colnames(test4)[4]="readCounts"
colnames(test5)[4]="readCounts"
statsData=rbind(test1,test2,test3,test4,test5)
#reorder factors and change species names for visualization
statsData$time=factor(statsData$time, levels = c("3h", "9h", "15h"))
statsData$replicate=sapply(statsData$experiment, FUN=function(X){gsub(strsplit(X, split="-")[[1]][1], pattern="[[:alpha:]]", replacement="")})
statsData$replicate[statsData$replicate==14]=1
statsData$replicate[statsData$replicate==15]=2
statsData$replicate[statsData$replicate==16]=1
statsData$species[statsData$species=="bhyd"]="B. hydrogenotrophica"
statsData$species[statsData$species=="rint"]="R. intestinalis"
statsData$species[statsData$species=="fpra"]="F. prausnitzii"
statsData$species[statsData$species=="all"]="All"
statsData$sp[statsData$sp=="phiX"]="PhiX174"
statsData$sp[statsData$sp=="Yeast"]="S. cerevisiae S288c"
statsData$sp=factor(statsData$sp, levels=c("BH", "FP", "RI", "S. cerevisiae S288c", "PhiX174"))
#plot
pdf("~/Documents/kevinRNAseq/mapping_counts_withphiX174_yeast_normalized.pdf", width=9, height=5)
ggbarplot(statsData, x="time", y="readCounts", color="sp", fill="sp", facet.by =c("replicate", "species"),position = position_dodge(0.8), palette=c(rgb(14, 112, 3, max = 255),rgb(4, 0, 255, max = 255), rgb(251, 0, 6, max = 255), rgb(254, 181, 30, max = 255), rgb(25, 197, 198, max = 255)), legend="right", legend.title="Species", ylab = "Read counts normalized by transcriptome size (%)")+theme_light()
dev.off()
